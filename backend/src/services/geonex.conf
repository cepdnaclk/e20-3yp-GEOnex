# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name geonex.site www.geonex.site;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl;
    server_name geonex.site www.geonex.site;

    # SSL certs
    ssl_certificate /etc/letsencrypt/live/geonex.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/geonex.site/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # ===== Auth service =====
    location /api/auth/ {
        proxy_pass http://localhost:5002/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    location /api/user/ {
        proxy_pass http://localhost:5002/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # ===== Device service =====
    location /api/devices/ {
        proxy_pass http://localhost:5003/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # ===== Project service =====
    location /api/projects/ {
        proxy_pass http://localhost:5004/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # ===== Point service =====
    location /api/points/ {
        proxy_pass http://localhost:5005/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # ===== MQTT service =====
    location /api/mqtt/ {
        proxy_pass http://localhost:5007/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # ===== Notification service =====
    location /api/notifications/ {
        proxy_pass http://localhost:5008/;
        include /etc/nginx/proxy_params;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # Optional: catch-all for root
    location / {
        return 404;
    }
}
